{"version":3,"sources":["components/Filter.js","components/Contacts/Contacts-list.js","components/Contact-form/Contact-form.js","App.js","reportWebVitals.js","index.js"],"names":["Filter","value","onChange","type","ContactsList","filteredContacts","onDeleteContact","map","name","number","id","className","onClick","ContactForm","state","handleChange","target","setState","handleSubmit","evt","preventDefault","props","onSubmit","reset","this","placeholder","pattern","title","required","Component","App","contacts","filter","addContact","contact","uuidv4","contactNames","renderContacts","contactsList","contactName","newContact","includes","alert","changeFilter","currentTarget","DeleteContact","contactId","prevState","console","log","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","normalizedFilter","toLocaleLowerCase","toLowerCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f283eb0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contacts by name\n    <input type=\"text\" value={value} onChange={onChange}></input>\n  </label>\n);\n\nexport default Filter;\n","import React from \"react\";\n// import './TodoList.css';\n\nconst ContactsList = ({ filteredContacts, onDeleteContact }) => (\n  <ul>\n    {filteredContacts.map(({ name, number, id }) => (\n      <li key={id} className=\"TodoList__item\">\n        <p>\n          {name} : {number}\n        </p>\n        <button onClick={() => onDeleteContact(id)}>Удалить</button>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default ContactsList;\n","import React, { Component } from \"react\";\n// import './TodoList.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (evt) => {\n    evt.preventDefault();\n    const { name, number } = this.state;\n    // console.log({ name }, { number });\n    this.props.onSubmit(name, number);\n    // this.setState({ name: \"\", number: \"\" });\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            value={this.state.name}\n            onChange={this.handleChange}\n            placeholder=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\" \"\n            required\n          />\n        </label>\n\n        <label>\n          Number\n          <input\n            value={this.state.number}\n            onChange={this.handleChange}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Filter from \"./components/Filter\";\nimport ContactsList from \"./components/Contacts/Contacts-list\";\nimport ContactForm from \"./components/Contact-form/Contact-form\";\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    // name: \"\",\n    // number: \"\",\n    filter: \"\",\n  };\n  addContact = (name, number) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    const contactNames = this.state.contacts.map((contact) => contact.name);\n    this.renderContacts(contactNames, contact.name, contact);\n  };\n\n  renderContacts = (contactsList, contactName, newContact) => {\n    if (contactsList.includes(contactName)) {\n      alert(`${contactName} is already in contacts`);\n    } else {\n      this.setState(({ contacts }) => ({\n        contacts: [newContact, ...contacts],\n      }));\n    }\n  };\n\n  changeFilter = (evt) => {\n    this.setState({ filter: evt.currentTarget.value });\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  DeleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  componentDidMount() {\n    console.log(\"componentDidMount\");\n\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"componentDidUpdate\");\n\n    if (this.state.contacts !== prevState.contacts) {\n      console.log(\"Refresh page\");\n\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n  render() {\n    const { filter } = this.state;\n    console.log(filter);\n\n    const normalizedFilter = this.state.filter.toLocaleLowerCase();\n    console.log(normalizedFilter);\n\n    const filteredContacts = this.state.contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n\n        <ContactsList\n          filteredContacts={filteredContacts}\n          onDeleteContact={this.DeleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//----- Код до создания компонентов-----\n// addContact = (name, number) => {\n//   const contact = {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   };\n\n//   this.setState((prevState) => ({\n\n//     contacts: [contact, ...prevState.contacts],\n//   }));\n// };\n\n// handleChangeNumber = (evt) => {\n//   this.setState({\n//     // name: evt.currentTarget.value,\n//     number: evt.target.numbervalue,\n//   });\n// };\n\n// handleChange = ({ target }) => {\n//   const { name, value } = target;\n//   this.setState({\n//     [name]: value,\n//   });\n// };\n\n// handleSubmit = (evt) => {\n//   evt.preventDefault();\n//   const { name, number } = this.state;\n\n//   this.addContact(name, number);\n//   this.setState({ name: \"\", number: \"\" });\n//   this.reset();\n// };\n//------------------------------------------------------------\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}